[modification]
	description=_"When playing a multiplayer game, you do not control what a unit advances to if it advances on another player's turn. With this modification you can set what your units advance to beforehand, either for a specific unit or for all units of the same type."
	id="plan_unit_advance"
	name=_"Plan Unit Advance"
	[options]
		[checkbox]
			default=no
			description=_"You will be asked a question on choosing advancement whenever an undecided unit appears.

Some eras and scenarios may automatically enable this option."
			id="pickadvance_force_choice"
			name=_"Force advancement planning"
		[/checkbox]
	[/options]
	[event]
		first_time_only=no
		name="preload"
		[lua]
			code="-- pickadvance_dialog

pickadvance = {}
local T = wml.tag
local _ = wesnoth.textdomain ""wesnoth""

function pickadvance.show_dialog_unsynchronized(advance_info, unit)
-- dialog exit codes --
	local cancel_code = -2
	local single_unit_code = -1
--
	local unit_type_options = advance_info.type_advances
	local options = {}
	for _, ut in ipairs(unit_type_options) do
		options[#options + 1] = wesnoth.unit_types[ut]
	end

	local unit_override_one = (advance_info.unit_override or {})[2] == nil
		and (advance_info.unit_override or {})[1] or nil
	local game_override_one = (advance_info.game_override or {})[2] == nil
		and (advance_info.game_override or {})[1] or nil

	local description_row = T.row {
		T.column {
			border = ""all"",
			border_size = 5,
			horizontal_alignment = ""left"",
			T.label {
				definition = ""title"",
				label = _ ""Plan Advancement""
			}
		},
	}

	local list_row_definition = T.grid {
		T.row {
			T.column {
				border = ""all"",
				border_size = 5,
				grow_factor = 0,
				horizontal_alignment = ""left"",
				T.image {
					id = ""the_icon"",
					linked_group = ""image""
				}
			},
			T.column {
				border = ""all"",
				border_size = 5,
				grow_factor = 1,
				horizontal_alignment = ""left"",
				T.label {
					use_markup = true,
					id = ""the_label"",
					linked_group = ""type""
				}
			},
			T.column {
				border = ""all"",
				border_size = 5,
				horizontal_alignment = ""center"",
				vertical_alignment = ""center"",
				T.image {
					id = ""global_icon"",
					linked_group = ""global_icon"",
					label = ""icons/action/editor-tool-unit_30-pressed.png"",
					tooltip = _ ""This advancement is currently the default for all units of the same type""
				}
			}
		}
	}

	local listbox = T.listbox {
		id = ""the_list"",
		has_minimum = true,
		T.list_definition {
			T.row {
				T.column {
					horizontal_grow = true,
					vertical_grow = true,
					T.toggle_panel {
						return_value = single_unit_code,
						list_row_definition
					}
				}
			}
		}
	}

-- main dialog definition
	local dialog = {
		T.tooltip {
			id = ""tooltip""
		},
		T.helptip {
			id = ""tooltip""
		},
		T.linked_group {
			id = ""image"",
			fixed_width = true
		},
		T.linked_group {
			id = ""type"",
			fixed_width = true
		},
		T.linked_group {
			id = ""global_icon"",
			fixed_width = true
		},
		T.grid {
			description_row,
			T.row {
				grow_factor = 1,
				T.column {
					border = ""all"",
					border_size = 5,
					horizontal_grow = true,
					listbox
				}
			},
			T.row {
				grow_factor = 0,
				T.column {
					border = ""all"",
					border_size = 5,
					horizontal_alignment = ""left"",
					T.toggle_button {
						id = ""apply_to_all"",
						label = _ ""Apply to all units of this type""
					}
				}
			},
			T.row {
				T.column {
					horizontal_alignment = ""right"",
					T.grid {
						T.row {
							grow_factor = 0,
							T.column {
								border = ""all"",
								border_size = 5,
								horizontal_alignment = ""right"",
								T.button {
									return_value = single_unit_code,
									label = _ ""Save""
								}
							},
							T.column {
								border = ""all"",
								border_size = 5,
								horizontal_alignment = ""right"",
								T.button {
									id = ""cancel"",
									label = _ ""Cancel""
								}
							}
						}
					}
				}
			}
		}
	}

-- dialog preshow function
	local function preshow(window)
		window.apply_to_all.visible = not unit.canrecruit

		local selection = 0

		local empty_icon_unit = ""misc/blank-hex.png""

		local null_row = window.the_list[1]
		null_row.the_icon.label = empty_icon_unit
		null_row.the_label.label = _ ""No planned advancement""
		null_row.global_icon.visible = false

		for i, advance_type in ipairs(options) do
			local n = i + 1
			local text = advance_type.name
			if advance_type.id == game_override_one or advance_type.id == unit_override_one then
				selection = n
			end
			local this_row = window.the_list[n]
			this_row.the_label.label = text
			local img = advance_type.__cfg.image
			if img then
				img = (""%s~TC(%d,%s)""):format(img, unit.side, advance_type.__cfg.flag_rgb or ""magenta"")
			else
				img = empty_icon_unit
			end
			this_row.the_icon.label = img
			this_row.global_icon.visible = not not (advance_type.id == game_override_one) or ""hidden""
		end

		window.the_list:focus()
		if selection > 0 then
			window.the_list.selected_index = selection
		end
	end

-- dialog postshow function
	local item_result
	local apply_to_all
	local function postshow(window)
		item_result = window.the_list.selected_index - 1
		apply_to_all = window.apply_to_all.selected
	end

	local dialog_exit_code = gui.show_dialog(dialog, preshow, postshow)

	if dialog_exit_code == cancel_code then
		return { ignore = true }
	end

-- determine the choice made
	local is_reset = item_result == 0
	return {
		ignore = false,
		is_unit_override = not apply_to_all,
		unit_override = not is_reset and options[item_result].id or table.concat(unit_type_options, "",""),

		is_game_override = apply_to_all,
		game_override = apply_to_all and (not is_reset and options[item_result].id) or nil,
	}
end

-- "
		[/lua]
		[lua]
			code="-- pick_advance/main.lua

local on_event = wesnoth.require ""on_event""
local F = wesnoth.require ""functional""
local T = wml.tag
local _ = wesnoth.textdomain ""wesnoth""

wesnoth.wml_actions.set_menu_item {
	id = ""pickadvance"",
	description = _ ""Plan Advancement"",
	T.show_if {
		T.lua {
			code = ""return pickadvance.menu_available()""
		},
	},
	T.command {
		T.lua {
			code = ""pickadvance.pick_advance()""
		}
	}
}

-- replace any non-alphanumeric characters with an underscore
local function clean_type_func(unit_type)
	return string.gsub(unit_type, ""[^a-zA-Z0-9]"", ""_"")
end

-- splits a comma delimited string of unit types
-- returns a table of unit types that aren't blank, ""null"", and that exist
local function split_comma_units(string_to_split)
	return F.filter(
		stringx.split(string_to_split or """"),
		function(s) return s ~= """" and s ~= ""null"" and wesnoth.unit_types[s] end
	)
end

-- returns a table of the original unit types
--         a comma delimited string containing the same values
local function original_advances(unit)
	local clean_type = clean_type_func(unit.type)
	local variable = unit.variables[""pickadvance_orig_"" .. clean_type] or """"
	return split_comma_units(variable), clean_type_func(variable)
end

-- replace the unit's current advancements with the new set of units via object/effect
local function set_advances(unit, array)
	unit:add_modification(""object"", {
		pickadvance = true,
		take_only_once = false,
		T.effect {
			apply_to = ""new_advancement"",
			replace = true,
			types = array
		}
	})
end

-- for table ""arr"" containing sets of [index,unit_type]
-- return table containing sets of [unit_type,true]
local function array_to_set(arr)
	local result = {}
	for _, v in ipairs(arr) do
		result[v] = true
	end
	return result
end

-- works as anti-cheat and fixes tricky bugs in [male]/[female]/undead variation overrides
local function filter_overrides(unit, overrides)
	local possible_advances_array = original_advances(unit)
	local possible_advances = array_to_set(possible_advances_array)
	local filtered = F.filter(overrides, function(e) return possible_advances[e] end)
	return #filtered > 0 and filtered or possible_advances_array
end

-- returns a table with the unit's original advancements
--         the unit's currently overridden advancement or nil if not set
--         the unit's currently overridden advancement or nil if not set, but set by some other mechanism from the current game
local function get_advance_info(unit)
	local type_advances, orig_options_sanitized = original_advances(unit)
	local game_override_key = ""pickadvance_side"" .. unit.side .. ""_"" .. orig_options_sanitized
	local game_override = wml.variables[game_override_key]
	local function correct(override)
		return override and #override > 0 and #override < #type_advances and override or nil
	end

	return {
		type_advances = type_advances,
		unit_override = correct(unit.advances_to),
		game_override = correct(split_comma_units(game_override)),
	}
end

-- true if there's a unit at the selected hex
--      the unit has advancements
--      the unit is on a local human controlled side
--      the unit has multiple options in either its original set of advancements or current set of advancements
function pickadvance.menu_available()
	local unit = wesnoth.units.get(wml.variables.x1, wml.variables.y1)
	return unit and
		#unit.advances_to > 0
		and wesnoth.sides[unit.side].is_local and wesnoth.sides[unit.side].controller == ""human""
		and (#original_advances(unit) > 1 or #unit.advances_to > 1)
end

-- if the unit doesn't have a set of original advancements present, remove any existing ""pickadvance"" object
-- set the unit's original advancements in its variables
-- and then set the unit's advancement to either a game-provided override or its default advancements
local function initialize_unit(unit)
	local clean_type = clean_type_func(unit.type)
	if unit.variables[""pickadvance_orig_"" .. clean_type] == nil then
		unit:remove_modifications{
			pickadvance = true
		}
		unit.variables[""pickadvance_orig_"" .. clean_type] = table.concat(unit.advances_to, "","")
		local advance_info = get_advance_info(unit)
		local desired = advance_info.game_override or unit.advances_to
		desired = filter_overrides(unit, desired)
		set_advances(unit, desired)
	end
end

-- let the player select the unit's advancement via dialog
function pickadvance.pick_advance(unit)
	unit = unit or wesnoth.units.get(wml.variables.x1, wml.variables.y1)
	initialize_unit(unit)
	local _, orig_options_sanitized = original_advances(unit)
	local dialog_result = wesnoth.sync.evaluate_single(function()
		local local_result = pickadvance.show_dialog_unsynchronized(get_advance_info(unit), unit)
		return local_result
	end, function() return { is_ai = true } end)
	if dialog_result.ignore or dialog_result.is_ai then
		return
	end
	dialog_result.unit_override = split_comma_units(dialog_result.unit_override)
	dialog_result.game_override = split_comma_units(dialog_result.game_override)
	dialog_result.unit_override = filter_overrides(unit, dialog_result.unit_override)
	dialog_result.game_override = filter_overrides(unit, dialog_result.game_override)
	if dialog_result.is_unit_override then
		set_advances(unit, dialog_result.unit_override)
	end
	if dialog_result.is_game_override then
		local key = ""pickadvance_side"" .. unit.side .. ""_"" .. orig_options_sanitized
		wml.variables[key] = table.concat(dialog_result.game_override, "","")
	end
end

-- make unit advancement tree viewable in the ingame help
local known_units = {}
local function make_unit_known(unit)  -- can be both unit or unit type
	local type = unit.type or unit.id
	if known_units[type] then return end
	known_units[type] = true
	wesnoth.add_known_unit(type)
	for _, advance in ipairs(unit.advances_to) do
		make_unit_known(wesnoth.unit_types[advance])
	end
end

-- initialize a unit for picking an advancement
-- make its advancements viewable
-- force picking an advancement if it has multiple and the force option was specified
local function initialize_unit_x1y1(ctx)
	local unit = wesnoth.units.get(ctx.x1, ctx.y1)
	if not wesnoth.sides[unit.side].__cfg.allow_player then return end
	initialize_unit(unit)
	make_unit_known(unit)
	if #unit.advances_to > 1 and wml.variables.pickadvance_force_choice and unit.side == wesnoth.current.side then
		pickadvance.pick_advance(unit)
	end
end

-- return true if the side can be played and has either a recruit list set or non-leader units
local function humans_can_recruit()
	for _, side in ipairs(wesnoth.sides) do
		local units = wesnoth.units.find_on_map { side = side.side, canrecruit = false }
		if side.__cfg.allow_player and (#side.recruit ~= 0 or #units > 0) then
			return true
		end
	end
end
-- return true if any keeps exist
local function map_has_keeps()
	for x, y in wesnoth.current.map:iter() do
		local terr = wesnoth.current.map[{x, y}]
		local info = wesnoth.terrain_types[terr]
		if info.keep then
			return true
		end
	end
end

-- on start determine whether choosing an advancement is force for each unit
on_event(""start"", function()
	local map_has_recruits = humans_can_recruit() and map_has_keeps()
	wml.variables.pickadvance_force_choice = wml.variables.pickadvance_force_choice or not map_has_recruits
end)

-- set ""fresh_turn"" for the moveto event at the start of each side turn
local fresh_turn = false
on_event(""turn refresh"", function()
	fresh_turn = true
end)

-- the first time a unit moves at the start of each side's turn, check if there are any new units that need to be forced to make an advancement choice
on_event(""moveto"", function()
	if fresh_turn then
		fresh_turn = false
		if not wesnoth.sides[wesnoth.current.side].__cfg.allow_player then return end
		for _, unit in ipairs(wesnoth.units.find_on_map { side = wesnoth.current.side }) do
			if #unit.advances_to > 1 and wml.variables.pickadvance_force_choice and wesnoth.current.turn > 1 then
				pickadvance.pick_advance(unit)
				if #unit.advances_to > 1 then
					local len = #unit.advances_to
					local rand = mathx.random(len)
					unit.advances_to = { unit.advances_to[rand] }
				end
			else
				initialize_unit(unit)
			end
		end
	end
end)

-- initialize units on recruit and after advancing, forcing another advancement choice if required
on_event(""recruit"", initialize_unit_x1y1)
on_event(""post advance"", initialize_unit_x1y1)


-- "
		[/lua]
	[/event]
[/modification]
