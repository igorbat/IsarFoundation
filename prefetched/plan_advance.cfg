[modification]
	description="In multiplayer game, you do not control unit advances if they happen on enemy turn.
With this add-on, you can set them beforehand:

* for one exact unit
* for all new recruits
"
	id="plan_unit_advance"
	name="Plan Unit Advance"
	[options]
		[checkbox]
			default=no
			description=_"You will be asked a question on choosing advancement whenever an undecided unit appears.

Always enabled for RPG eras and maps."
			id="pickadvance_force_choice"
			name=_"Force advancement planning"
		[/checkbox]
	[/options]
	[event]
		first_time_only=no
		name="preload"
		[set_variable]
			name="pickadvance_contacts"
			value="Contacts:
* Source code, issue tracker: https://github.com/vgaming/pick_advance
* BTC: 148AvMtozrKs3MzXCNMGNUTHLoqahw3fCo
* vasya: my name on wesnoth :)
* vn971 on IRC.freenode.net (I often visit #wesnoth-umc-dev)
"
		[/set_variable]
		[lua]
			code="-- json_format

-- wesnoth.dofile(""~add-ons/pick_advance/lua/json_format.lua"")

local next = next
local print = print
local tostring = tostring
local type = type
local gsub = string.gsub
local table = table

local delete_chars = string.char(00, 01, 02, 03, 04, 05, 06, 07, 08, 09, 10, 11, 12, 13, 14, 15,
	16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31) -- https://www.ietf.org/rfc/rfc4627.txt
local delete_regexp = ""["" .. delete_chars .. ""]""

-- escaping takes 3/4 of the time, but we can't avoid it...
local function escape(str)
	str = gsub(str, delete_regexp, """")
	str = gsub(str, '\\', '\\\\')
	return gsub(str, '""', '\\""')
end

local function print_table_key(obj, buffer)
	local _type = type(obj)
	if _type == ""string"" then
		buffer[#buffer + 1] = escape(obj)
	elseif _type == ""number"" then
		buffer[#buffer + 1] = obj
	elseif _type == ""boolean"" then
		buffer[#buffer + 1] = tostring(obj)
	else
		buffer[#buffer + 1] = '???' .. _type .. '???'
	end
end

local function format_any_value(obj, buffer)
	local _type = type(obj)
	if _type == ""table"" then
		buffer[#buffer + 1] = '{'
		buffer[#buffer + 1] = '""' -- needs to be separate for empty tables {}
		for key, value in next, obj, nil do
			print_table_key(key, buffer)
			buffer[#buffer + 1] = '"":'
			format_any_value(value, buffer)
			buffer[#buffer + 1] = ',""'
		end
		buffer[#buffer] = '}' -- note the overwrite
	elseif _type == ""string"" then
		buffer[#buffer + 1] = '""' .. escape(obj) .. '""'
	elseif _type == ""boolean"" or _type == ""number"" then
		buffer[#buffer + 1] = tostring(obj)
	elseif _type == ""userdata"" then
		buffer[#buffer + 1] = '""' .. escape(tostring(obj)) .. '""'
	else
		buffer[#buffer + 1] = '""???' .. _type .. '???""'
	end
end

local function _format_as_json(obj)
	if obj == nil then return ""null"" else
		local buffer = {}
		format_any_value(obj, buffer)
		return table.concat(buffer)
	end
end

local function _print_as_json(...)
	local result = {}
	local n = 1
	for _, v in ipairs({ ... }) do
		result[n] = _format_as_json(v)
		n = n + 1
	end
	print(table.concat(result, ""\t""))
end


format_as_json = _format_as_json
print_as_json = _print_as_json

-- "
		[/lua]
		[lua]
			code="-- pickadvance_dialog

pickadvance = {}
local pickadvance = pickadvance
local wesnoth = wesnoth
local ipairs = ipairs
local table = table
local T = wesnoth.require(""lua/helper.lua"").set_wml_tag_metatable {}
local translate = wesnoth.textdomain ""wesnoth""

local function filter_false(arr)
	local result = {}
	for _, v in ipairs(arr) do
		if v ~= false then
			result[#result + 1] = v
		end
	end
	return result
end


function pickadvance.show_dialog_unsynchronized(advance_info, unit)
	local spacer = ""\n""
	local label = ""Plan advance:""

	local unit_type_options = advance_info.type_advances
	--print_as_json(""advances for"", unit.type, unit_type_options)
	local options = {}
	for _, ut in ipairs(unit_type_options) do
		options[#options + 1] = wesnoth.unit_types[ut]
	end
	local show_images = true

	local unit_override_one = (advance_info.unit_override or {})[2] == nil
		and (advance_info.unit_override or {})[1] or nil
	local game_override_one = (advance_info.game_override or {})[2] == nil
		and (advance_info.game_override or {})[1] or nil

	local description_row = T.row {
		T.column { T.label { use_markup = true, label = label } },
	}

	local list_sub_row
	if show_images then
		list_sub_row = T.row {
			T.column { T.image { id = ""the_icon"" } },
			T.column { grow_factor = 0, T.label { use_markup = true, id = ""the_label"" } },
			T.column { grow_factor = 1, T.spacer {} },
		}
	else
		list_sub_row = T.row {
			T.column { horizontal_alignment = ""left"", T.label { use_markup = true, id = ""the_label"" } }
		}
	end

	local toggle_panel = T.toggle_panel { return_value = -1, T.grid { list_sub_row } }

	local list_definition = T.list_definition { T.row { T.column { horizontal_grow = true, toggle_panel } } }

	local listbox = T.listbox { id = ""the_list"", list_definition, has_minimum = true }

	local reset_button = T.button {
		return_value = -3,
		label = ""\n"" .. translate(""Reset"") .. ""\n""
	}
	local reset_column = (unit_override_one or game_override_one)
		and T.column { horizontal_grow = true, reset_button }
		or false

	local help_button = T.button {
		return_value = -4,
		label = ""\n"" .. translate(""Help"") .. ""\n""
	}

	local reset_help_buttons = T.grid {
		T.row(filter_false {
			reset_column,
			T.column { horizontal_grow = true, help_button }
		})
	}
	local unit_button_label = unit.canrecruit and ""\nSave\n"" or ""\nSave for unit\n""
	local unit_button = T.button { return_value = -1, label = unit_button_label }
	local recruits_subbutton = T.button { return_value = 1, label = ""\nSave for this unit and new\n"" }
	local recruits_button = not unit.canrecruit
		and T.row { T.column { horizontal_grow = true, recruits_subbutton } }

	local dialog = {
		T.tooltip { id = ""tooltip_large"" },
		T.helptip { id = ""tooltip_large"" },
		T.grid(filter_false {
			T.row { T.column { T.spacer { width = 250 } } },
			description_row,
			T.row { T.column { horizontal_grow = true, listbox } },
			T.row { T.column { horizontal_grow = true, unit_button } },
			recruits_button,
			T.row { T.column { horizontal_grow = true, reset_help_buttons } },
		})
	}

	local function preshow()
		for i, advance_type in ipairs(options) do
			local text = spacer .. advance_type.name
			if advance_type.id == unit_override_one then
				text = text .. "" &lt;-unit""
			end
			if advance_type.id == game_override_one then
				text = text .. "" &lt;-recruits""
			end
			text = text .. ""  "" .. spacer
			wesnoth.set_dialog_value(text, ""the_list"", i, ""the_label"")
			local img = advance_type.__cfg.image
			wesnoth.set_dialog_value(img or ""misc/blank-hex.png"", ""the_list"", i, ""the_icon"")
		end

		wesnoth.set_dialog_focus(""the_list"")

		local function select()
			local i = wesnoth.get_dialog_value ""the_list""
			if i > 0 then
				local img = options[i].__cfg.image
				wesnoth.set_dialog_value(img or ""misc/blank-hex.png"", ""the_list"", i, ""the_icon"")
			end
		end
		wesnoth.set_dialog_callback(select, ""the_list"")
	end

	local item_result
	local function postshow()
		item_result = wesnoth.get_dialog_value(""the_list"")
	end

	local dialog_exit_code
	while true do
		dialog_exit_code = wesnoth.show_dialog(dialog, preshow, postshow)
		local is_help = dialog_exit_code == -4
		if is_help then
			wesnoth.wml_actions.message {
				speaker = ""narrator"",
				message = ""<b>Save for unit</b> will make your unit always advance to said type. ""
					.. ""Even if it's leveled during enemy-s turn.""
					.. ""\n\n""
					.. ""<b>Save for game</b> applies to all new recruits of same type in game.""
					.. ""\n\n""
					.. wesnoth.get_variable(""pickadvance_contacts""),
				image = ""misc/qmark.png~SCALE(200,200)""
			}
		else
			break
		end
	end
	--local is_cancel = dialog_exit_code == -2
	local is_reset = dialog_exit_code == -3
	local is_ok = dialog_exit_code > -2 and item_result >= 1
	--print(string.format(""Button %s pressed (%s). Item %s selected: %s"",
	--	dialog_exit_code, is_ok and ""ok"" or ""not ok"", item_result, options[item_result].id))
	local game_scope = dialog_exit_code == 1
	return {
		is_unit_override = is_reset or is_ok,
		unit_override = is_ok and options[item_result].id
			or is_reset and table.concat(unit_type_options, "",""),
		is_game_override = is_reset or game_scope,
		game_override = game_scope and options[item_result].id or nil,
	}
end

-- "
		[/lua]
		[lua]
			code="-- pick_advance/main.lua

local pickadvance = pickadvance
local ipairs = ipairs
local string = string
local table = table
local wesnoth = wesnoth
local wml = wml
local on_event = wesnoth.require(""lua/on_event.lua"")
local T = wesnoth.require(""lua/helper.lua"").set_wml_tag_metatable {}

wesnoth.wml_actions.set_menu_item {
	id = ""pickadvance"",
	description = ""Pick Advance"",
	T.show_if {
		T.lua {
			code = ""return pickadvance.menu_available()""
		},
	},
	T.command {
		T.lua {
			code = ""pickadvance.pick_advance()""
		}
	}
}

local function clean_type_func(unit_type)
	return string.gsub(unit_type, ""[^a-zA-Z0-9]"", ""_"")
end

local function split_comma_units(string_to_split)
	local result = {}
	local n = 1
	for s in string.gmatch(string_to_split or """", ""[^,]+"") do
		if s ~= """" and s ~= ""null"" and wesnoth.unit_types[s] then
			result[n] = s
			n = n + 1
		end
	end
	return result
end


local function original_advances(unit)
	local clean_type = clean_type_func(unit.type)
	local variable = unit.variables[""pickadvance_orig_"" .. clean_type] or """"
	return split_comma_units(variable), clean_type_func(variable)
end

local function set_advances(unit, array)
	wesnoth.add_modification(unit, ""object"", {
		id = ""pickadvance"",
		take_only_once = false,
		T.effect {
			apply_to = ""new_advancement"",
			replace = true,
			types = table.concat(array, "","")
		}
	})
end


local function array_to_set(arr)
	local result = {}
	for _, v in ipairs(arr) do
		result[v] = true
	end
	return result
end

local function array_filter(arr, func)
	local result = {}
	for _, v in ipairs(arr) do
		if func(v) then
			result[#result + 1] = v
		end
	end
	return result
end

--- works as anti-cheat and fixes tricky bugs in [male]/[female]/undead variation overrides
local function filter_overrides(unit, overrides)
	local possible_advances_array = original_advances(unit)
	local possible_advances = array_to_set(possible_advances_array)
	local filtered = array_filter(overrides, function(e) return possible_advances[e] end)
	return #filtered > 0 and filtered or possible_advances_array
end


local function get_advance_info(unit)
	local type_advances, orig_options_sanitized = original_advances(unit)
	local game_override_key = ""pickadvance_side"" .. unit.side .. ""_"" .. orig_options_sanitized
	local game_override = wesnoth.get_variable(game_override_key)
	local function correct(override)
		return override and #override > 0 and #override < #type_advances and override or nil
	end

	return {
		type_advances = type_advances,
		unit_override = correct(unit.advances_to),
		game_override = correct(split_comma_units(game_override)),
	}
end


function pickadvance.menu_available()
	local unit = wesnoth.get_unit(wml.variables.x1, wml.variables.y1)
	return unit and
		#unit.advances_to > 0
		and wesnoth.sides[unit.side].is_local and wesnoth.sides[unit.side].controller == ""human""
		and (#original_advances(unit) > 1 or #unit.advances_to > 1)
end


local function initialize_unit(unit)
	local clean_type = clean_type_func(unit.type)
	if unit.variables[""pickadvance_orig_"" .. clean_type] == nil then
		wesnoth.wml_actions.remove_object {
			object_id = ""pickadvance"",
			id = unit.id
		}
		unit.variables[""pickadvance_orig_"" .. clean_type] = table.concat(unit.advances_to, "","")
		local advance_info = get_advance_info(unit)
		local desired = advance_info.game_override or unit.advances_to
		desired = filter_overrides(unit, desired)
		set_advances(unit, desired)
		-- print_as_json(""initialized unit"", unit.id, unit.advances_to)
	end
end


function pickadvance.pick_advance(unit)
	unit = unit or wesnoth.get_unit(wml.variables.x1, wml.variables.y1)
	initialize_unit(unit)
	local _, orig_options_sanitized = original_advances(unit)
	local dialog_result = wesnoth.synchronize_choice(function()
		local local_result = pickadvance.show_dialog_unsynchronized(get_advance_info(unit), unit)
		-- print_as_json(""locally chosen advance for unit"", unit.id, local_result)
		return local_result
	end, function() return { is_ai = true } end)
	if dialog_result.is_ai then
		return
	end
	-- print_as_json(""applying manual choice for"", unit.id, dialog_result)
	dialog_result.unit_override = split_comma_units(dialog_result.unit_override)
	dialog_result.game_override = split_comma_units(dialog_result.game_override)
	dialog_result.unit_override = filter_overrides(unit, dialog_result.unit_override)
	dialog_result.game_override = filter_overrides(unit, dialog_result.game_override)
	if dialog_result.is_unit_override then
		set_advances(unit, dialog_result.unit_override)
	end
	if dialog_result.is_game_override then
		local key = ""pickadvance_side"" .. unit.side .. ""_"" .. orig_options_sanitized
		wesnoth.set_variable(key, table.concat(dialog_result.game_override, "",""))
	end
end


local known_units = {}
local function make_unit_known(unit)  -- can be both unit or unit type
	local type = unit.type or unit.id
	if known_units[type] then return end
	-- print_as_json(""making unit known"", unit)
	known_units[type] = true
	wesnoth.add_known_unit(type)
	for _, advance in ipairs(unit.advances_to) do
		-- print_as_json(""going into advance"", advance)
		make_unit_known(wesnoth.unit_types[advance])
	end
end

local function initialize_unit_x1y1(ctx)
	local unit = wesnoth.get_unit(ctx.x1, ctx.y1)
	if not wesnoth.sides[unit.side].__cfg.allow_player then return end
	initialize_unit(unit)
	make_unit_known(unit)
	if #unit.advances_to > 1 and wml.variables.pickadvance_force_choice and unit.side == wesnoth.current.side then
		pickadvance.pick_advance(unit)
	end
end

local function humans_can_recruit()
	for _, side in ipairs(wesnoth.sides) do
		local units = wesnoth.get_units { side = side.side, canrecruit = false }
		if side.__cfg.allow_player and (#side.recruit ~= 0 or #units > 0) then
			return true
		end
	end
end
local function map_has_keeps()
	local width,height,_ = wesnoth.get_map_size()
	for x = 1, width do
		for y = 1, height do
			local terr = wesnoth.get_terrain(x, y)
			local info = wesnoth.get_terrain_info(terr)
			if info.keep then
				return true
			end
		end
	end
end
on_event(""start"", -91, function()
	local map_has_recruits = humans_can_recruit() and map_has_keeps()
	wml.variables.pickadvance_force_choice = wml.variables.pickadvance_force_choice
		or not map_has_recruits
end)

local fresh_turn = false
on_event(""turn refresh"", function()
	fresh_turn = true
end)
on_event(""moveto"", function()
	if fresh_turn then
		fresh_turn = false
		if not wesnoth.sides[wesnoth.current.side].__cfg.allow_player then return end
		for _, unit in ipairs(wesnoth.get_units { side = wesnoth.current.side }) do
			if #unit.advances_to > 1 and wml.variables.pickadvance_force_choice and wesnoth.current.turn > 1 then
				pickadvance.pick_advance(unit)
				if #unit.advances_to > 1 then
					local len = #unit.advances_to
					local rand = wesnoth.random(len)
					unit.advances_to = { unit.advances_to[rand] }
				end
			else
				initialize_unit(unit)
			end
		end
	end
end)

on_event(""recruit"", initialize_unit_x1y1)
on_event(""post advance"", initialize_unit_x1y1)


-- "
		[/lua]
	[/event]
	[event]
		name="preload"
		[lua]
			code="-- advertisement

local wesnoth = wesnoth
local string = string
local tostring = tostring
local wml = wml
local on_event = wesnoth.require(""lua/on_event.lua"")
local T = wesnoth.require(""lua/helper.lua"").set_wml_tag_metatable {}

local addon_name = tostring((...).name)
local addon_dir = tostring((...).dir)
local addon_about = tostring((...).about)
local addon_icon = tostring((...).icon)
local addon_host_version = tostring((...).version)
addon_icon = string.gsub(addon_icon, ""\n"", """") .. ""~SCALE_INTO(144,144)""

wesnoth.wml_actions.set_menu_item {
	id = ""about_"" .. addon_dir,
	description = ""About: "" .. addon_name,
	synced = false,
	T.command {
		T.message {
			caption = addon_name .. "" v"" .. addon_host_version,
			message = addon_about,
			image = addon_icon
		}
	}
}

local function show_message(text)
	wesnoth.wml_actions.event {
		name = ""moveto"",
		first_time_only = true,
		T.filter_condition {
			T.lua { code = ""return wesnoth.sides[wesnoth.current.side].is_local"" }
		},
		T.message {
			caption = addon_name,
			message = text,
			image = addon_icon,
		}
	}
end

local filename = ""~add-ons/"" .. addon_dir .. ""/target/version.txt""
local my_version = wesnoth.have_file(filename) and wesnoth.read_file(filename) or ""0.0.0""

local highest_ver_key = ""addon_"" .. addon_dir .. ""_highest""
wml.variables[highest_ver_key] = my_version

on_event(""side turn 1"", function()
	local side_version = wesnoth.synchronize_choice(function() return { v = my_version } end).v
	if rawget(_G, ""print_as_json"") then _G.print_as_json(""addon"", addon_name, wesnoth.current.side, side_version) end

	if wesnoth.compare_versions(side_version, "">"", wml.variables[highest_ver_key]) then
		wml.variables[highest_ver_key] = side_version
	end
end)

if my_version == ""0.0.0"" then
	local text = ""This game uses "" .. addon_name .. "" add-on. ""
		.. ""\n""
		.. ""If you like it, feel free to install it from add-ons server.""
		.. ""\n\n""
		.. ""======================\n\n""
		.. addon_about
	show_message(text)
	return
end

on_event(""turn 2"", function()
	if my_version == wml.variables[highest_ver_key] then
		return
	end

	local advertisement = ""🠉🠉🠉 Please upgrade your "" .. addon_name .. "" add-on 🠉🠉🠉""
		.. ""\n""
		.. my_version .. "" -> "" .. wml.variables[highest_ver_key]
		.. ""  (you may do that after the game)\n\n""
	show_message(advertisement)
end)


-- "
			[args]
				about="In multiplayer game, you do not control unit advances if they happen on enemy turn.
With this add-on, you can set them beforehand:

* for one exact unit
* for all new recruits
"
				dir="pick_advance"
				icon="misc/blank-hex.png~BLIT(lobby/status-lobby-s.png~SCALE(36,36),0,36)~BLIT(units/elves-wood/avenger.png~CROP(20,12,47,47)~SCALE(36,36),36,0)~BLIT(units/elves-wood/marksman.png~CROP(16,12,47,47)~SCALE(36,36),36,36)
"
				name="Plan Unit Advance"
				version="1.11.5"
			[/args]
		[/lua]
	[/event]
[/modification]
