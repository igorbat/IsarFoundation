[multiplayer]
	description="The random map for the popular mod Afterlife, currently two maps in the pool: classical afterlife, AfterAlpha"
	experience_modifier=100
	id="afterlife_random"
	map_data="Qxe, Qxe, Qxe, Qxe, Ai, Ai, Aa, Ms^Xm, Ai, Xv, Ai, Ms^Xm, Aa, Ai, Ai, Qxe, Qxe, Qxe, Qxe
Qxe, Qxe, Gll^Efm, Ai, Uu, Uh, Ur, Aa, Ai, Xv, Ai, Aa, Ur, Uh, Uu, Ai, Gll^Efm, Qxe, Qxe
Qxe, Ai^Ii, Gll^Efm, Wog, Wwf, 2 Ur, Uu^Uf, Ur, Wwf, Xv, Wwf, Ur, Uu^Uf, 4 Ur, Wwf, Wog, Gll^Efm, Ai^Ii, Qxe
Gll, Gll^Efm, Wwf, Gll^Efm, Wwf, Ur, Wwg^Bsb\, Wwf, Gll^Efm, Xv, Gll^Efm, Wwf, Wwg^Bsb/, Ur, Wwf, Gll^Efm, Wwf, Gll^Efm, Gll
Gll^Efm, Wwf, Sm, Wwg, Gd^Efm, Dd, Wwg, Gll^Efm, Gll^Efm, Xv, Gll^Efm, Gll^Efm, Wwg, Dd, Gd^Efm, Wwg, Sm, Wwf, Gll^Efm
Gg^Efm, Wwf, Wwf, Gd^Efm, Gd^Efm, Wwf, Gs^Fet, Dd^Dc, Gd^Efm, Xv, Gd^Efm, Dd^Dc, Gs^Fet, Wwf, Gd^Efm, Gd^Efm, Wwf, Wwf, Gg^Efm
Gg, Mm, Wwf, Hhd^Fp, Gd^Efm, Wog, Wwf, Gd^Efm, Gs^Efm, Xv, Gs^Efm, Gd^Efm, Wwf, Wog, Gd^Efm, Hhd^Fp, Wwf, Mm, Gg
Gg, Hh^Fp, Gs^Vc, Gd^Fp, Gd^Efm, Gd^Efm, Gs^Fp, Wwf, Ss, Xv, Ss, Wwf, Gs^Fp, Gd^Efm, Gd^Efm, Gd^Fp, Gs^Vc, Hh^Fp, Gg
Gg, Gs^Efm, Gs^Efm, Gs^Efm, Gd^Fp, Mm, Wwf, Wwf, Hh^Fp, Xv, Hh^Fp, Wwf, Wwf, Mm, Gd^Fp, Gs^Efm, Gs^Efm, Gs^Efm, Gg
Gg^Fp, Gg^Fp, Dd^Do, Gs^Efm, Wwf^Bsb\, Wwf, Hh, Gs^Vhcr, Dd^Do, Xv, Dd^Do, Gs^Vhcr, Hh, Wwf, Wwf^Bsb/, Gs^Efm, Dd^Do, Gg^Fp, Gg^Fp
Gg^Fp, Hh^Fp, Gg^Fp, Hh, Wwg, Gs^Efm, Gs^Efm, Gg^Fp, Gg^Efm, Xv, Gg^Efm, Gg^Fp, Gs^Efm, Gs^Efm, Wwg, Hh, Gg^Fp, Hh^Fp, Gg^Fp
Gg^Fp, Ss, Gg^Efm, Hh, Gg^Vhc, Wwf, Gg^Fp, Gg^Efm, Gg^Fp, Xv, Gg^Fp, Gg^Efm, Gg^Fp, Wwf, Gg^Vhc, Hh, Gg^Efm, Ss, Gg^Fp
Mm^Xm, Ch, 1 Kh, Dd^Do, Ch, Wwf, Mm, Hh, Gs^Efm, Xv, Gs^Efm, Hh, Mm, Wwf, Ch, Dd^Do, 3 Kh, Ch, Mm^Xm
Mm^Xm, Mm^Xm, Mm^Xm, Ch, Wwf, Wwf, Gs^Efm, Dd^Do, Mm^Xm, Xv, Mm^Xm, Dd^Do, Gs^Efm, Wwf, Wwf, Ch, Mm^Xm, Mm^Xm, Mm^Xm
Mm^Xm, Mm^Xm, Mm^Xm, Mm^Xm, Wwf, Mm^Xm, Mm^Xm, Mm^Xm, Mm^Xm, Xv, Mm^Xm, Mm^Xm, Mm^Xm, Mm^Xm, Wwf, Mm^Xm, Mm^Xm, Mm^Xm, Mm^Xm
"
	name="Afterlife Random"
	random_start_time=yes
	require_scenario=no
	turns=-1
	[event]
		first_time_only=no
		name="prestart"
		[set_variable]
			name="laterlife_about_header"
			value="A modification of the popular Afterlife survival scenario"
		[/set_variable]
		[lua]
			code="-- generic_functions

function sum_table_values(table) 
    local response = 0
    for str,val in pairs(table) do response = response + val end
    return response
end

function sum_array_values(t)
    local response = 0
    for index,value in ipairs(t) do 
        response = response + value
    end
    return response
end

function map(t, f) 
    local response = {}
    for index,value in ipairs(t) do
        table.insert(response, f(index,value))
    end
    return response
end

function for_each_index(t,f)
    for index,value in ipairs(t) do
        f(index,value)
    end
end

function for_each_key(t,f)
    for key, value in pairs(t) do
        f(key,value)
    end
end

function key_map(t,f) 
    local response = {}
    for key, value in pairs(t) do
        response[key] = f(key, value)
    end
    return response
end

function key_transform(t,f) 
    local response = {}
    for key_string,value in pairs(t) do
        local result = f(key_string,value)
        response[result.key] = result.value
    end
    return response
end

function array_table_transform (t,f) 
    local response = {}
    for index, value_literal in ipairs(t) do
        local result = f(index, value_literal)
        response[result.key] = result.value
    end
    return response
end

function sequence_generator(initial_value, f, length)
    local counter = 0
    local response = {}
    response[1] = initial_value
    while counter < length do
        counter = counter + 1
        response[counter + 1] = f(response[counter])
    end
    return response
end

               
function mutate_table(table, f)
  for index, value in ipairs(table) do table[index] = f(value, index) end
end

function populate_tables(count)
  local parent_table = {}
  for i = 1, count do
    table.insert(parent_table, {})
  end
  return parent_table
end

function another_sort_of_keys(t)
    local ordered_map = {}
    for k, v in pairs(t) do
        table.insert(ordered_map, k)
    end
    table.sort(ordered_map)
    return ordered_map
end

function table_aggregator_commutative_only(t, f)
    local aggregate = {}
    local container = {}
    local initialized = false
    local counter = 1
    for key,value in pairs(t) do
        if initialized == false then 
            aggregate[1] = key
            aggregate[2] = value
            initialized = true
        else 
            container[0] = f(aggregate[1], aggregate[2], key,value)
            for k,v in pairs(container[0]) do
                aggregate[1] = k
                aggregate[2] = v
            end
        end
    end
    return aggregate
end

function compose(f,g)
    return function(...) 
        return f(g(...)) 
    end
end 

function identity (x) 
    return x
end

function second_arg_identity(x,y)
    return y
end

function initialize_array(length, f)
    local response = {}
    for i=1, length do
        table.insert(response, f(i))
    end
    return response
end

function str_split (str) 
    local response = {}
    for chunk in utils.split(str) do
        table.insert(response, chunk)
    end
    return response
end

function zero ()
    return 0
end

function array_reverse (array)
    local response = initialize_array(#array, identity)
    for index,value in ipairs(array) do
        response[#array - index + 1] = value
    end
    return response
end        

function array_filter (array, f)
    local response = {}
    for_each_index(array, function (index,value) if f(index,value) == true then table.insert(response, value) end end)
    return response
end    

function array_count_to_array (t)
    local counter = map(t, second_arg_identity)
    local response = initialize_array(#t, zero)
    for_each_index(counter, function (i,v) for_each_index(counter, function (i2, v2) if v2 == v then response[i] = response[i] + 1 end end) end)
    return response
end

function array_match(t,value)
    local response = false
    for_each_index(t, function (i,v) if v == value then response = true end end)
    return response
end

function array_match_compare_function (t, value, f)
    local response = false
        for_each_index(t, function (i,v) if f(value, v) == true then response = true end end)
    return response
end

function array_cartesian_product (arr1, arr2) 
    local response = {}
    for_each_index(arr1, function (i,v) for_each_index(arr2, function (i2, v2) table.insert(response, { v , v2 }) end) end)
    return response
end
    
        
    
    
    

--[[
local function ordered_map_of_keys(t, predicate_function)
    local ordered_map = {}
    local symmetric_error = false
    local transitive_error = false -- no test
    local temporary = 0
    local counter = 1
    local counter_two = 1

    for key,value in pairs(t) do
        ordered_map[counter]Â = key
        counter = counter + 1
    end
    
    if #table < 2 return ordered_map end

    for index, val in ipairs(ordered_map) do
        counter_two = 1
        while counter_two < #t do
            if predicate_function(ordered_map[counter_two], ordered_map[counter_two + 1]) == true then
                if predicate_function(ordered_map[counter_two + 1], ordered_map[counter_two]) == true then symmetric_error = true end
                temporary = ordered_map[counter_two]
                ordered_map[counter_two] = ordered_map[counter_two + 1]
                ordered_map[counter_two + 1] = temporary
            else if predicate_function(ordered_map[counter_two], ordered_map[counter_two + 1]) == false and predicate_function(ordered_map[counter_two + 1], ordered_map[counter_two]) == false then symmetric_error = true end
            end
            counter_two = counter_two + 1         
        end
    end
    
    if symmetric_error == true then error(""symmetric predicate function in ordered map"") end
    return ordered_map
end
]]--

    

-- math functions

function normalized_gaussian_function(x,sigma,mu)
    return 1/((sigma * math.sqrt(2*math.pi)) * math.exp(-(((x-mu)^2)/(2*sigma^2))))
end

function gaussian_function(x,a,b,c) 
    return a * math.exp(-(((x-b)^2)/(2*c^2)))
end

function array_merge(t,t2)
    local response = {}
    for_each_index(t, function (i,v) table.insert(response,v) end)
    for_each_index(t2, function (i,v) table.insert(response,v) end)
    return response
end
        

function weighted_random(odds)
    local total = sum_array_values(odds)
    local normalized = map(odds, function(i,v) return v / total end)   
    local target = wesnoth.random()
    local sum = 0.0
    local counter = 1
    for index=1, #odds do
        sum = sum + normalized[counter]
        if target < sum then
            break
        end
        counter = counter + 1 
    end
    return counter
end
 
-- "
		[/lua]
		[lua]
			code="-- mutate_terrian

local wesnoth = wesnoth
local laterlife = laterlife
local ipairs = ipairs
local string = string
local T = wesnoth.require(""lua/helper.lua"").set_wml_tag_metatable {} 

local width, height, border = wesnoth.get_map_size()

width = (width - 1) * 0.5

local mutation_probability = 0.20

local function select_random_array_index(array)
    return array[wesnoth.random(#array)]
end

local mutation_table = {
    { {6,4}, {""Wog"", ""Sm"", ""Wwrg""}, },
    { {2,4}, {""Wwrg"", ""Wwf"", ""Wog"", ""Dd"", ""Gxua""}, },
    { {4,4}, {""Wwf"", ""Dd"", ""Sm"", }, },    
    { {1,5}, {""Wo"", ""Wwrg"", ""Wog"", ""Sm""}, },     
    { {3,5}, {""Wo"", ""Wwrg"", ""Wwf"", ""Sm"", ""Ss"", ""Gg^Fp""}, },
    { {4,5}, {""Wwf"", ""Dd"", ""Sm"", ""Ss"", ""Gg^Fp"", ""Hh"", ""Hh^Fp"",}, },
    { {5,5}, {""Wo"", ""Ss"", ""Sm"",}, },                 
    { {6,5}, {""Gg"", ""Wo"", ""Wwf"", ""Wog""}, }, 
    { {8,5}, {""Dd"", ""Mm"", ""Wwf"", ""Wo"", ""Hh"", ""Hh^Fp"", ""Gg^Fp""}, },
    { {2,6}, {""Wwrg"", ""Ss"", ""Gll"", ""Uu""}, },
    { {3,6}, {""Gll^Fp"", ""Dd"", ""Hhd"", ""Hhd^Uf"",""Gll""}, },
    { {4,6}, {""Gd^Fp"", ""Wwf"", ""Dd"", ""Sm"", ""Gd^Uf""}, },    
    { {5,6}, {""Wo"", ""Wwf""}, },   
    { {6,6}, {""Wo"", ""Dd"", ""Sm""}, },           
    { {7,6}, {""Wo"", ""Dd"", ""Sm"", ""Hh"", ""Hh^Fp"", ""Gg""}, },               
    { {8,6}, {""Ss"", ""Wwf"", ""Wwrg"", ""Gxua"", ""Hh"", ""Hhd"", ""Hh^Fp"", ""Dd"", ""Mm"", ""Md""}, },    
    { {1,7}, {""Gll^Fp"", ""Hhd"", ""Ss"", ""Wwf"", ""Gll"", ""Wwrg""}, },
    { {5,7}, {""Mm"", ""Md"", ""Hh"", ""Hhd"", ""Gg"", ""Gg^Fp"", ""Hh^Fp"", ""Ss"", ""Sm"", ""Wwf"", ""Wo"", ""Dd"", ""Chs"", }, },      
    { {3,7}, {""Gll^Fp"", ""Hhd"", ""Uu"", ""Uu^Uf"", ""Hhd^Fp"", ""Wwf"", ""Gll""}, },    
    { {6,7}, {""Sm"", ""Wog"", ""Wo"", ""Dd"", ""Gll"", ""Hhd"", ""Hhd^Uf""}, },
    { {8,7}, {""Wog"", ""Wo"", ""Gll"", ""Gll^Fp"", ""Chs"", ""Dd""}, },    
    { {1,8}, {""Gd"", ""Hhd"", ""Hh"", ""Hh^Fp"", ""Wwf"", ""Ss"", ""Mm"", ""Dd""}, },
    { {2,8}, {""Gd"", ""Hhd"", ""Hh"", ""Hh^Fp"", ""Wwf"", ""Ss"", ""Mm""}, },        
    { {3,8}, {""Hh"", ""Hhd"", ""Hh^Fp"", ""Hhd^Fp"", ""Hh^Uf"", ""Gg^Uf"", ""Dd"",""Ss""}, },    
    { {4,8}, {""Gd"", ""Hhd"", ""Dd""}, },    
    { {5,8}, {""Hh"", ""Hhd^Fp"", ""Gll^Fp"", ""Dd^Do"", ""Gll"", ""Gg^Ve"", ""Ss""}, },
    { {6,8}, {""Wo"", ""Sm"", ""Ss"", ""Dd"", ""Rb"", ""Wwrg""}, },    
    { {7,8}, {""Wo"", ""Sm"", ""Ss"", ""Dd"", ""Rb"", ""Wwrg""}, },    
    { {8,8}, {""Hh"", ""Gll^Fp"", ""Ss"", ""Hh^Uf"", ""Ss^Fp""}, },    
    { {1,9}, {""Gg"", ""Hh"", ""HH^Fp"", ""Dd"", ""Wo""}, }, 
    { {2,9}, {""Dd"", ""Gg"", ""Gd^Uf"", ""Gg^Fp"", ""Hh"", ""Hh^Fp""}, },      
    { {4,9}, {""Wo"", ""Ss"", ""Sm^Uf"", ""Rb""}, },            
    { {5,9}, {""Wo"", ""Ss"", ""Sm^Uf"", ""Rb"", ""Wog"", ""Wwrg""}, },                
    { {6,9}, {""Hh^Fp"", ""Gg"", ""Gg^Uf"", ""Hh^Uf"", ""Dd^Do""}, },
    { {8,9}, {""Hh"", ""Gll^Fp"", ""Hh^Fp"", ""Hh^Uf"", ""Ss^Fp""}, },        
    { {1,10}, {""Hh"", ""Gd^Fp"", ""Ss"", ""Hh^Uf""}, },
    { {2,10}, {""Gg"", ""Ss"", ""Hh^Fp"", ""Uu"", ""Ss^Fp"", ""Wo""}, },    
    { {3,10}, {""Ss"", ""Ss^Fp"", ""Gd^Fp"", ""Hh^Fp"", ""Gd^Uf""}, },
    { {4,10}, {""Sm"", ""Ss"", ""Wwf""}, },
    { {5,10}, {""Gd"", ""Rb"", ""Hh"", ""Hh^Fp""}, },       
    { {6,10}, {""Gd"", ""Rb"", ""Wwf"", ""Sm"", ""Ss"", ""Hh"", ""Hh^Fp"", ""Mm"", ""Md""}, },    
    { {8,10}, {""Gd"", ""Hh"", ""Hh^Fp"", ""Gg^Uf"", ""Ss"", ""Gg^Ve"", ""Mm"", ""Chs""}, },           
    { {1,11}, {""Gg"", ""Mm"", ""Hh"", ""Gg^Fp"", ""Hh^Fp"", ""Hh^Uf""}, },    
    { {3,11}, {""Mm"", ""Hh^Fp"", ""Ss^Fp"", ""Ss"", ""Gg^Fp"", ""Dd"", ""Sm""}, },    
    { {5,11}, {""Sm"", ""Wo""}, },
    { {6,11}, {""Gg"", ""Hh"", ""Hh^Fp"", ""Ss"", ""Gg^Ve""}, },    
    { {3,12}, {""Dd"", ""Mm"", ""Gg""}, },
    { {6,12}, {""Gg"", ""Gd"", ""Hh"", ""Hhd"", ""Hh^Fp"", ""Ss"", }, },    
    { {7,12}, {""Gg"", ""Gd"", ""Hhd"", ""Hh^Fp"", ""Ss"", }, },        
    { {7,13}, {""Dd"", ""Gg"", ""Gg^Ve""}, },    
}

local function get_mirror (x) 
    return width + 2 - (x - width) 
end
    
local function apply_mutation (table_row)
    local x = table_row[1][1]
    local x2 = get_mirror(x)
    local y = table_row[1][2]
    local types_array = table_row[2]
    local selected = select_random_array_index(types_array)
    wesnoth.set_terrain(x,y, selected)
    wesnoth.set_terrain(x2,y,selected)
end

for_each_index(mutation_table, function (index, element) 
    if wesnoth.random() < mutation_probability then
        apply_mutation(element)
    end
end)

-- "
		[/lua]
		[set_variable]
			name="map_id"
			rand="1..2"
		[/set_variable]
		[set_variable]
			name="map_name"
			value=" Afteralpha"
		[/set_variable]
		[if]
			[variable]
				equals=1
				name="map_id"
			[/variable]
			[then]
				[store_unit]
					kill=yes
					variable="leader1"
					[filter]
						side=1
					[/filter]
				[/store_unit]
				[store_unit]
					kill=yes
					variable="leader3"
					[filter]
						side=3
					[/filter]
				[/store_unit]
				[replace_map]
					expand=yes
					map="Aa, Ai, Gll, Gll, Gll^Emf, Gg, Aa, Gll, Xv, Gll, Aa, Gg, Gll^Emf, Gll, Gll, Ai, Aa
Aa, Wwf, Gll, 2 Gll, Gll, Gll, Gll, Aa, Xv, Aa, Gll, Gll, Gll, 4 Gll, Gll, Wwf, Aa
Gll, Wwf, Wwf, Gll, Gll, Gll, Gll, Gll, Xv, Gll, Gll, Gll, Gll, Gll, Wwf, Wwf, Gll
Wwf, Gll, Gll, Wwf, Wwf^Bsb|, Wwf, Wwf, Gll, Xv, Gll, Wwf, Wwf, Wwf^Bsb|, Wwf, Gll, Gll, Wwf
Gll, Wwf, Wwf^Bsb/, Gll, Gll, Gll, Wwf, Gll, Xv, Gll, Wwf, Gll, Gll, Gll, Wwf^Bsb\, Wwf, Gll
Gd, Gll, Wwf, Gd, Gd, Gll, Wwf, Gll, Xv, Gll, Wwf, Gll, Gd, Gd, Wwf, Gll, Gd
Gd, Gd, Wwf, Hhd^Fp, Gd, Gd, Wwf, Gll, Xv, Gll, Wwf, Gd, Gd, Hhd^Fp, Wwf, Gd, Gd
Gd, Mm, Gs^Vh, Gll^Fp, Wwf, Wwf, Gd, Gd, Xv, Gd, Gd, Wwf, Wwf, Gll^Fp, Gs^Vh, Mm, Gd
Gd, Hhd, Wwf, Wwf, Gd, Hhd, Gs, Gll^Fp, Xv, Gll^Fp, Gs, Hhd, Gd, Wwf, Wwf, Hhd, Gd
Gs, Dd^Do, Wwf, Gll^Fp, Hh, Gs, Gs^Vh, Gs, Xv, Gs, Gs^Vh, Gs, Hh, Gll^Fp, Wwf, Dd^Do, Gs
Gs, Gs, Gs^Fms, Wwf, Gs, Gs, Gs, Hh, Xv, Hh, Gs, Gs, Gs, Wwf, Gs^Fms, Gs, Gs
Gs, Gs^Vh, Gs, Wwf, Wwf, Hh, Gll^Fp, Gs, Xv, Gs, Gll^Fp, Hh, Wwf, Wwf, Gs, Gs^Vh, Gs
Gg, Gg, Gll^Ftr, Gs, Gg, Wwf, Hh, Dd^Do, Xv, Dd^Do, Hh, Wwf, Gg, Gs, Gll^Ftr, Gg, Gg
Gs^Ft, Gg, Gg, Ch, 1 Kh, Ch, Gg, Gg, Xv, Gg, Gg, Ch, 3 Kh, Ch, Gg, Gg, Gs^Ft
Gg, Dd^Ftd, Gg, Gll^Ftr, Gg, Gs^Ft, Gg, Gs^Ft, Xv, Gs^Ft, Gg, Gs^Ft, Gg, Gll^Ftr, Gg, Dd^Ftd, Gg
"
					shrink=yes
				[/replace_map]
				[unstore_unit]
					variable="leader1"
					x=4
					y=13
				[/unstore_unit]
				[unstore_unit]
					variable="leader3"
					x=12
					y=13
				[/unstore_unit]
				[set_variable]
					name="map_name"
					value="  Afterlife"
				[/set_variable]
				[lua]
					code="laterlife.recalc_map_params()"
				[/lua]
			[/then]
		[/if]
	[/event]
	[event]
		first_time_only=no
		name="preload"
		[lua]
			code="-- utils_laterlife

laterlife = {}
local laterlife = laterlife
local wesnoth = wesnoth
local ipairs = ipairs
local math = math
local helper = wesnoth.require(""lua/helper.lua"")
local T = wesnoth.require(""lua/helper.lua"").set_wml_tag_metatable {}


wesnoth.wml_conditionals = wesnoth.wml_conditionals or {}
wesnoth.wml_conditionals.has_unit = wesnoth.wml_conditionals.has_unit or function(cfg)
	laterlife.temp = false
	wesnoth.wml_actions[""if""] {
		T.have_unit(cfg),
		T[""then""] { T.lua { code = ""laterlife.temp = true"" } }
	}
	return laterlife.temp
end


local function unit_wml_transform(unit_userdata, x, y)
	wesnoth.wml_actions.store_unit {
		T.filter { id = unit_userdata.id },
		variable = ""laterlife_unit"",
	}
	local unit_var = wesnoth.get_variable(""laterlife_unit"")
	local id = helper.rand(""0..1000000000"")
		.. helper.rand(""0..1000000000"")
		.. helper.rand(""0..1000000000"")
	unit_var.id = id
	unit_var.underlying_id = id
	unit_var.canrecruit = false
	unit_var.x = x
	unit_var.y = y
	wesnoth.set_variable(""laterlife_unit"", unit_var)
	wesnoth.wml_actions.unstore_unit {
		variable = ""laterlife_unit"",
	}
	wesnoth.set_variable(""laterlife_unit"", nil)
	return id
end


local function copy_unit(unit_original, to_pos, to_side, strength_percent)
	if to_pos == nil then return end
	if unit_original.type == ""Fog Clearer"" then return end
	local from_side = unit_original.side
	local new_id = unit_wml_transform(unit_original, to_pos.x, to_pos.y)
	local unit = wesnoth.get_units { id = new_id }[1]
	unit.side = to_side
	unit.status.poisoned = false
	unit.status.slowed = false
	unit.variables.laterlife_fresh_copy = true
	unit.moves = unit.max_moves
	if wesnoth.compare_versions(wesnoth.game_config.version, "">="", ""1.13.6"") then
		wesnoth.add_modification(unit, ""object"", {
			id = ""laterlife_grayscale"",
			T.effect { apply_to = ""image_mod"", add=""GS()"" },
			T.effect { apply_to = ""zoc"", value = false },
		})
		unit.status.petrified = false
		unit.status.invulnerable = true
	else
		unit.status.petrified = true
	end

	local increase_percent = strength_percent - 100
	local ability = T.name_only {
		name = ""copy"" .. strength_percent ..  ""%"",
		description = strength_percent .. ""% hitpoints, ""
			.. strength_percent .. ""% damage, ""
			.. ""unit copied from side "" .. from_side
	}
	wesnoth.add_modification(unit, ""object"", {
		T.effect { apply_to = ""attack"", increase_damage = increase_percent .. ""%"" },
		T.effect { apply_to = ""hitpoints"", increase_total = increase_percent .. ""%"", heal_full = true },
		T.effect { apply_to = ""new_ability"", T.abilities { ability } },
	})
end


local function unpetrify_units()
	local status_filter = wesnoth.compare_versions(wesnoth.game_config.version, "">="", ""1.13.6"")
		and ""invulnerable"" or ""petrified""
	local filtered_units = wesnoth.get_units { side = wesnoth.current.side, status = status_filter }
	for _, unit in ipairs(filtered_units) do
		if unit.variables.laterlife_fresh_copy then
			unit.status.petrified = false
			unit.status.invulnerable = false
			unit.variables.laterlife_fresh_copy = nil
			if wesnoth.compare_versions(wesnoth.game_config.version, "">="", ""1.13.6"") then
				wesnoth.wml_actions.remove_object {
					id = unit.id,
					object_id = ""laterlife_grayscale"",
				}
				local img = string.gsub(unit.image_mods, ""GS%(%)$"", ""NOP()"", 1)
				wesnoth.add_modification(unit, ""object"", {
					T.effect { apply_to = ""image_mod"", replace = img },
				})
			end
		end
	end
end


local width, height, border = wesnoth.get_map_size()
local half = (width - 1) / 2
local left_left = border
local left_right = border + half - 1
local right_left = border + half + 1
local right_right = border + width - 1

function laterlife.recalc_map_params()
	width, height, border = wesnoth.get_map_size()
	half = (width - 1) / 2
	left_left = border
	left_right = border + half - 1
	right_left = border + half + 1
	right_right = border + width - 1
end

function laterlife.find_vacant(unit, y_min, honor_edge)
	y_min = y_min or border
	y_min = math.max(border, y_min)
	local x_start = unit.side == 1 and right_left or left_right
	local x_end = unit.side == 1 and right_right or left_left
	local x_step = (x_end - x_start) / math.abs(x_end - x_start)
	for y = y_min, height do
		for x = x_start, x_end, x_step do
			local is_edge = honor_edge and y == y_min and x == x_start
			if wesnoth.wml_conditionals.has_unit { x = x, y = y } == false
				and wesnoth.get_terrain(x, y) ~= ""Xv""
                and wesnoth.get_terrain(x, y) ~= ""Qxe""
                and wesnoth.get_terrain(x, y) ~= ""Qxe^Xo""
                and wesnoth.get_terrain(x, y) ~= ""Qxua""
                and wesnoth.get_terrain(x, y) ~= ""Qxua^Xo""
				and not is_edge then
				return { x = x, y = y }
			end
		end
	end
end


local function side_is_local(side)
	return wesnoth.sides[side].controller == ""human"" and wesnoth.sides[side].is_local ~= false
end

local function endlevel_winner(winner, loser)
	wesnoth.wml_actions.kill {
		side = loser,
	}
	local is_win = side_is_local(winner) or not side_is_local(loser)
	wesnoth.wml_actions.endlevel {
		result = is_win and ""victory"" or ""defeat""
	}
end


print(""active mods:"", wesnoth.game_config.mp_settings.active_mods)


laterlife.endlevel_winner = endlevel_winner
laterlife.copy_unit = copy_unit
laterlife.unpetrify_units = unpetrify_units

-- "
		[/lua]
		[lua]
			code="-- laterlife/main_laterlife

local wesnoth = wesnoth
local laterlife = laterlife
local ipairs = ipairs
local string = string
local T = wesnoth.require(""lua/helper.lua"").set_wml_tag_metatable {}


local wave_length = 2  -- also change: experience_modifier in _main.cfg, text in about.txt
local new_wave_length = 3
local copy_strength_start = 32 -- point of no return is about 50%
local copy_strength_increase = 2


local human_side1, human_side2 = 1,3
local ai_side1, ai_side2 = 2,4
local sides = {
	[1] = { enemy_human = 3, enemy_clone = 2, half_owner = 1, is_human = true },
	[2] = { half_owner = 1, is_human = false },
	[3] = { enemy_human = 1, enemy_clone = 4, half_owner = 3, is_human = true },
	[4] = { half_owner = 2, is_human = false },
}


wesnoth.wml_actions.kill {
	canrecruit = true,
	side = ai_side1 .. "","" .. ai_side2,
	fire_event = false,
	animate = false,
}


if not wml.variables[""events_here""] then
	for _, side in ipairs(wesnoth.sides) do
		side.village_support = side.village_support + 2
	end
	wesnoth.wml_actions.event {
		name = ""turn refresh"",
		first_time_only = false,
		T.lua { code = ""laterlife.turn_refresh()"" }
	}
	wesnoth.wml_actions.event {
		name = ""side turn end"",
		first_time_only = false,
		T.lua { code = ""laterlife.side_turn_end_event()"" }
	}
	wml.variables[""events_here""] = ""here""
end


local function copy_units(from_side, to_side)
	for _, unit_original in ipairs(wesnoth.get_units { side = from_side }) do
		local percent = copy_strength_start + wesnoth.current.turn * copy_strength_increase
		local to_pos = laterlife.find_vacant(unit_original, nil, true)
		if to_pos == nil then
			wesnoth.wml_actions.message {
				speaker = ""narrator"",
				message = ""No free space to place a copy"",
			}
			laterlife.endlevel_winner(from_side, sides[from_side].enemy_human)
			break
		else
			laterlife.copy_unit(unit_original, to_pos, to_side, percent)
		end
	end
end


function laterlife.turn_refresh()
    if wesnoth.current.turn == 13 then wave_length = new_wave_length end
	if wesnoth.current.turn % wave_length == 1 then
		if wesnoth.current.side == 1 then
			copy_units(human_side2, ai_side1)
			copy_units(human_side1, ai_side2)
		end
		if sides[wesnoth.current.side].is_human == false then
			laterlife.unpetrify_units()
		end
	end
	-- print(""turn"", wesnoth.current.turn, ""side"", wesnoth.current.side, ""div"", (wesnoth.current.turn - 2) % wave_length) 
	local next_wave_turn = wesnoth.current.turn
		- (wesnoth.current.turn - 2) % wave_length
		+ wave_length - 1
	local width, height, border = wesnoth.get_map_size()
	wesnoth.wml_actions.label {
		x = (width / 2) + 1,
		y = (height / 2) - 1,
		text = string.format(""<span color='#FFFFFF'>%s</span>"", wml.variables[""map_name""])
	}
	wesnoth.wml_actions.label {
		x = (width / 2) + 1,
		y = height / 2,
		text = string.format(""<span color='#FFFFFF'>Next wave:\n    turn %s</span>"",next_wave_turn)
	}
	wesnoth.wml_actions.label {
		x = (width / 2) + 1,
		y = (height / 2) + 2,
		text = string.format(""<span color='#FFFFFF'>Game: %d</span>"",wml.variables[""wap_afterbot_game""])
	}
end

function laterlife.side_turn_end_event()
	for _, unit in ipairs(wesnoth.get_units { canrecruit = true, side = wesnoth.current.side }) do
		unit.status.uncovered = true
	end
end


-- "
		[/lua]
		[objectives]
			note="$laterlife_about_header|"
			[objective]
				condition="win"
				description=_"Death of enemy Leader"
			[/objective]
			[objective]
				condition="lose"
				description=_"Death of your Leader"
			[/objective]
			[note]
				description="You don't face your opponent directly, instead you fight weakened copies of the opponent's units"
			[/note]
			[note]
				description="New copies get stronger than previous ones"
			[/note]
			[note]
				description="Before turn 13 waves appear once per 2 turns, after turn 13 waves appear once per 3 turns"
			[/note]
		[/objectives]
	[/event]
	[time]
		blue=0
		green=-15
		id="dawn"
		image="misc/time-schedules/default/schedule-dawn.png"
#textdomain wesnoth-help
		name=_"Dawn"
		red=-25
		sound="ambient/morning.ogg"
	[/time]
	[time]
		id="morning"
		image="misc/time-schedules/default/schedule-morning.png"
		lawful_bonus=25
		name=_"Morning"
	[/time]
	[time]
		id="afternoon"
		image="misc/time-schedules/default/schedule-afternoon.png"
		lawful_bonus=25
		name=_"Afternoon"
	[/time]
	[time]
		blue=-35
		green=-20
		id="dusk"
		image="misc/time-schedules/default/schedule-dusk.png"
		name=_"Dusk"
		red=10
		sound="ambient/night.ogg"
	[/time]
	[time]
		blue=-13
		green=-45
		id="first_watch"
		image="misc/time-schedules/default/schedule-firstwatch.png"
		lawful_bonus=-25
		name=_"First Watch"
		red=-75
	[/time]
	[time]
		blue=-13
		green=-45
		id="second_watch"
		image="misc/time-schedules/default/schedule-secondwatch.png"
		lawful_bonus=-25
		name=_"Second Watch"
		red=-75
	[/time]
	[music]
		ms_before=12000
		name="knolls.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="wanderer.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="battle.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="transience.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="the_king_is_dead.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="knalgan_theme.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="the_city_falls.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="nunc_dimittis.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="revelation.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="loyalists.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="breaking_the_chains.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="elvish-theme.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="legends_of_the_north.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="traveling_minstrels.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="underground.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="vengeful.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="frantic.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="the_dangerous_symphony.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="heroes_rite.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="suspense.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="the_deep_path.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="siege_of_laurelmor.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="casualties_of_war.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="silvan_sanctuary.ogg"
	[/music]
	[music]
		append=yes
		ms_before=12000
		name="battle-epic.ogg"
	[/music]
	[event]
		name="prestart"
		[music]
			ms_before=12000
			name="knolls.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="wanderer.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="battle.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="transience.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="the_king_is_dead.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="knalgan_theme.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="the_city_falls.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="nunc_dimittis.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="revelation.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="loyalists.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="breaking_the_chains.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="elvish-theme.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="legends_of_the_north.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="traveling_minstrels.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="underground.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="vengeful.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="frantic.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="the_dangerous_symphony.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="heroes_rite.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="suspense.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="the_deep_path.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="siege_of_laurelmor.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="casualties_of_war.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="silvan_sanctuary.ogg"
		[/music]
		[music]
			append=yes
			ms_before=12000
			name="battle-epic.ogg"
		[/music]
	[/event]
	[side]
		color="purple"
		controller="human"
		fog=false
		gold=75
		shroud=false
		team_lock=true
		team_name="West"
	[/side]
	[side]
		allow_player=false
		color="white"
		controller="ai"
		defeat_condition="always"
		fog=false
		shroud=false
		team_lock=true
		team_name="East"
		[ai]
			aggression=0.995
			caution=0.005
			grouping=no
		[/ai]
	[/side]
	[side]
		color="orange"
		controller="human"
		fog=false
		gold=75
		shroud=false
		team_lock=true
		team_name="East"
	[/side]
	[side]
		allow_player=false
		color="blue"
		controller="ai"
		defeat_condition="always"
		fog=false
		shroud=false
		team_lock=true
		team_name="West"
		[ai]
			aggression=0.995
			caution=0.005
			grouping=no
		[/ai]
	[/side]
[/multiplayer]
